#Множества - set - неупорядоченная коллекция уникальных элементов, т.е. коллекция в которой отсутствуют дубли
#создание
a = {1, 2, 3, 4, 1, 2, 3, 4}
print(a, type(a))

# b = {'hi', 'hello', 'world', 'hi', 'halo', 'dream'}
# c = set('abracadabrabum') на вход поступает строка, тогда set разбивает на символы, а из символов создает коллекцию - множеста
# d = set([1, 3, 5, 7, 2, 4, 6, 2, 5, 9]) создание множества из списка
# e = (set(range(5))
# чтобы создать пустое множество a = set()
# элементами множества могут быть только неизменяемые объекты: числа, строки, кортежи
#ДОБАВЛЕНИЕ ЭЛЕМЕНТОВ на примере множества a
# a.add(10) (не приписываем в начале а= , просто сразу добавляем)
# a.update([8, 11, 13]) (вместо update можно несколько раз добавить add. Через update можно добавлять только итерируемые объекты - числа, строки, range-и, множества )
# УДАЛЕНИЕ ЭЛЕМЕНТОВ
# a.discard(4) при использовании дискарда не будет ошибки если удалить элемент, которого нет в списке
# a.remove(4) при попытке удалить несуществующий эл-т, получим ошибку
# a.pop() удаляет рандомный элемент
# a.clear удалеят все элементы из множества/ПЫСЫ из пустого множетсва нельзя удалять элементы
#ОПЕРАЦИИ НАД МНОЖЕСТВАМИ
# a = {53, 34, 4, 6, 9, 10} -> длина множества len(a)
#принадлежит элемент множеству 4 in a, 7 not is a -> True True
#пересечение множеств a = {1, 3, 5, 7, 9} b = {1, 2, 3, 4, 5} найти пересечение при помощи амперсанта & -> print(a & b)
# можно изменить, например a& = b,  и тогда в a запишется результ пересечения a и b, то есть {1, 3, 5}
# a.intersection(b) - тоже самое что и использование амперсанда
# a.intersection_update(b) в том числе перезапишет список a
#объединение списков -> print(a|b) или print(a.union(b))
# вычитание множеств, удалятся все пересекающиеся значения, и останутся элементы того списка от которого вычитали,
# то есть print(a-b) даст нам 7, 9, а print(b-a) -- 2 и 4, при этом сами множества не меняются
# симметричная разность - результатом операции будут все элементы, которые принедлежат множествам, за исключением общих
#print(a^b) #будет {2, 4, 7, 9}
#множества можно сравнивать a == b, они будут равны если все элементы одного множества есть в другом, при этом не берутся в расчет дубли и порядок располжения эл-тов в множестве
# также можно использовать для сравнения > и <
# можно с помощью цикла for обойти множество по значениям, по индексам - нельзя